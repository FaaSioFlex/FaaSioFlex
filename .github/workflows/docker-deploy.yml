name: Docker CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check if Dockerfile Exists
        id: check_dockerfile
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found, exiting."
            exit 1
          fi

      - name: Build Docker Image
        if: steps.check_dockerfile.outcome == 'success'
        run: |
          docker build -t my-go-app:latest . 

      - name: Check if Docker Image Exists
        id: check_image
        run: |
          if ! docker images -q my-go-app:latest; then
            echo "No Docker image found. No image was built."
            exit 1
          fi

      - name: Run Tests
        if: steps.check_image.outcome == 'success'
        run: |
          docker run --rm my-go-app:latest || echo "Error ejecutando la aplicaci칩n" # Esto ejecutar치 tu aplicaci칩n en el contenedor y capturar치 errores

      - name: Login to Docker Hub
        if: steps.check_image.outcome == 'success'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  
          password: ${{ secrets.DOCKER_PASSWORD }}  

      - name: Push Docker Image
        if: steps.check_image.outcome == 'success'
        run: |
          docker push my-go-app:latest  

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      # Despliegue en Fly.io
      # - name: Log in to Fly.io
        # uses: flyctl-actions/login@v1
        # with:
          # api_token: ${{ secrets.FLY_API_TOKEN }}

      # - name: Deploy to Fly.io
       # run: |
          # flyctl deploy --remote-only --app faasioflex

      # Despliegue en Heroku
      #- name: Log in to Heroku
       # run: |
         # echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username _ --password-stdin registry.heroku.com

      #- name: Deploy to Heroku
       # run: |
         # heroku container:push web --app faasioflex
         # heroku container:release web --app faasioflex

      # Despliegue en tu servidor
      # - name: Deploy to Server
       # if: success()
        # run: |
          # ssh user@your-server-ip "docker pull my-go-app:latest && docker run -d my-go-app:latest"
